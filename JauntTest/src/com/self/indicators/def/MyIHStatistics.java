package com.self.indicators.def;

public interface MyIHStatistics {

	/**
	 * è¿”å›žä¸€ä¸ª IHInstrument å¯¹è±¡ï¼Œå®ƒè¡¨ç¤ºè¿™æ¬¡æ›´æ–°æ˜¯é’ˆå¯¹å“ªä¸€ä¸ªè‚¡ç¥¨
	 * 
	 * @return
	 */
	MyIHInstrument getInstrument();

	/**
	 * è¿”å›žæœ€æ–°çš„æˆ?äº¤ä»·
	 * 
	 * @return
	 */
	double getLastPrice();

	/**
	 * è¿”å›žå½“å‰?æœ€é«˜æˆ?äº¤ä»·ã€‚åœ¨æ¯?æ—¥å›žæµ‹ä¸­ï¼Œå®ƒæ€»æ˜¯è¿”å›žå½“æ—¥çš„æœ€é«˜æˆ?äº¤ä»·ã€‚
	 * 
	 * @return
	 */
	double getHighPrice();

	/**
	 * è¿”å›žå½“å‰?æœ€ä½Žæˆ?äº¤ä»·ã€‚åœ¨æ¯?æ—¥å›žæµ‹ä¸­ï¼Œå®ƒæ€»æ˜¯è¿”å›žå½“æ—¥çš„æœ€ä½Žæˆ?äº¤ä»·ã€‚
	 * 
	 * @return
	 */
	double getLowPrice();

	/**
	 * è¿”å›žå¼€ç›˜ä»·ã€‚
	 * 
	 * @return
	 */
	double getOpeningPrice();

	/**
	 * è¿”å›žæ”¶ç›˜ä»·ã€‚
	 * 
	 * @return
	 */
	double getClosingPrice();

	/**
	 * è¿”å›žå½“æ—¥æ€»äº¤æ˜“çš„è‚¡æ•°ã€‚
	 * 
	 * @return
	 */
	double getTurnoverVolume();

	/**
	 * vwapæ˜¯volume weighted average priceï¼ˆæˆ?äº¤é‡?åŠ æ?ƒå¹³å?‡ä»·ï¼‰çš„ç®€ç§°ï¼Œä»¥å?Žéƒ½ä¼šç”¨â€œvwapâ€?æ?¥ä»£è¡¨è¿™ä¸ªæ¦‚å¿µã€‚
	 * 
	 * @param numTicks
	 * @param tickPeriod
	 * @return
	 */
	double vwap(int numTicks, MyHPeriod tickPeriod);

	/**
	 * è¿™ä¸ªæ–¹æ³•è¿”å›žæŒ‡å®šåŒºé—´çš„ç§»åŠ¨å¹³å?‡å€¼ã€‚mavgæ˜¯moving averageçš„ç®€å†™ï¼Œæˆ‘ä»¬ä¹‹å?Žä¹Ÿä¼šç”¨mavgæ?¥ä»£è¡¨è¿™ä¸ªæ¦‚å¿µ
	 * 
	 * @param numTicks
	 * @param tickPeriod
	 * @return
	 */
	double mavg(int numTicks, MyHPeriod tickPeriod);

	/**
	 * ç”¨æ?¥è®¿é—®æ›¾ç»?æ”¶åˆ°è¿‡çš„è¡Œæƒ…ï¼Œè¿™ä¸ªæ–¹æ³•æ˜¯é?žå¸¸ä¾¿æ?·çš„ã€‚ç›®å‰?æˆ‘ä»¬å?ªæ”¯æŒ?ç”±å½“å‰?æ—¶é—´å¼€å§‹å€’æ•°numTicksä¸ªæ—¶é—´æ®µï¼Œå¹¶ä¸”åŒ…æ‹¬å½“å‰?æ—¶é—´ã€‚ç›®å‰?å?ªæ”¯æŒ?æ¯?æ—¥å›žæµ‹ï¼Œ
	 * æ‰€ä»¥MyHPeriodå?ªèƒ½å?–MyHPeriod
	 * .Dayã€‚å®ƒè¿”å›žäº†ä¸€ä¸ªåŽ†å?²è¡Œæƒ…åŒ…ï¼Œå?«æœ‰IHStatisticsçš„å?„ä¸ªå±žæ€§å€¼ï¼Œä½†æ˜¯æ²¡æœ‰vwapæˆ–mavgè¿™äº›éœ€è¦?è®¡ç®—æ‰?èƒ½äº§ç”Ÿçš„å€¼
	 * ã€‚è¯·å?‚è€ƒå…³äºŽMyIHStatisticsHistoryçš„ç« èŠ‚ã€‚
	 * 
	 * @param numTicks
	 * @param tickPeriod
	 * @return
	 */
	MyIHStatisticsHistory history(int numTicks, MyHPeriod tickPeriod);
}
